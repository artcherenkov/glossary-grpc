# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import glossary_pb2 as glossary__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in glossary_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class GlossaryServiceStub(object):
    """Сервис
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTerm = channel.unary_unary(
                '/glossary.GlossaryService/CreateTerm',
                request_serializer=glossary__pb2.CreateOrUpdateTermRequest.SerializeToString,
                response_deserializer=glossary__pb2.TermResponse.FromString,
                _registered_method=True)
        self.GetTerm = channel.unary_unary(
                '/glossary.GlossaryService/GetTerm',
                request_serializer=glossary__pb2.TermKeyRequest.SerializeToString,
                response_deserializer=glossary__pb2.TermResponse.FromString,
                _registered_method=True)
        self.UpdateTerm = channel.unary_unary(
                '/glossary.GlossaryService/UpdateTerm',
                request_serializer=glossary__pb2.CreateOrUpdateTermRequest.SerializeToString,
                response_deserializer=glossary__pb2.TermResponse.FromString,
                _registered_method=True)
        self.DeleteTerm = channel.unary_unary(
                '/glossary.GlossaryService/DeleteTerm',
                request_serializer=glossary__pb2.TermKeyRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.ListTerms = channel.unary_unary(
                '/glossary.GlossaryService/ListTerms',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=glossary__pb2.TermsListResponse.FromString,
                _registered_method=True)


class GlossaryServiceServicer(object):
    """Сервис
    """

    def CreateTerm(self, request, context):
        """Создать термин
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTerm(self, request, context):
        """Получить термин
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTerm(self, request, context):
        """Обновить термин
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTerm(self, request, context):
        """Удалить термин
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTerms(self, request, context):
        """Получить список всех терминов
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GlossaryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateTerm': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTerm,
                    request_deserializer=glossary__pb2.CreateOrUpdateTermRequest.FromString,
                    response_serializer=glossary__pb2.TermResponse.SerializeToString,
            ),
            'GetTerm': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTerm,
                    request_deserializer=glossary__pb2.TermKeyRequest.FromString,
                    response_serializer=glossary__pb2.TermResponse.SerializeToString,
            ),
            'UpdateTerm': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTerm,
                    request_deserializer=glossary__pb2.CreateOrUpdateTermRequest.FromString,
                    response_serializer=glossary__pb2.TermResponse.SerializeToString,
            ),
            'DeleteTerm': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTerm,
                    request_deserializer=glossary__pb2.TermKeyRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ListTerms': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTerms,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=glossary__pb2.TermsListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'glossary.GlossaryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('glossary.GlossaryService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GlossaryService(object):
    """Сервис
    """

    @staticmethod
    def CreateTerm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/glossary.GlossaryService/CreateTerm',
            glossary__pb2.CreateOrUpdateTermRequest.SerializeToString,
            glossary__pb2.TermResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTerm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/glossary.GlossaryService/GetTerm',
            glossary__pb2.TermKeyRequest.SerializeToString,
            glossary__pb2.TermResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateTerm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/glossary.GlossaryService/UpdateTerm',
            glossary__pb2.CreateOrUpdateTermRequest.SerializeToString,
            glossary__pb2.TermResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteTerm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/glossary.GlossaryService/DeleteTerm',
            glossary__pb2.TermKeyRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListTerms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/glossary.GlossaryService/ListTerms',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            glossary__pb2.TermsListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
